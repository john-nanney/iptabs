#!/usr/bin/perl

# This software is public domain and has no express or implied warranty.

use warnings;
use strict;

my $use_sshguard = 0;
my $use_forward = 0;
my $drop_ipv6 = 0;
my $drop_ping = 0;
my $use_synprotect = 1;
my $drop_fragments = 1;
my $drop_xmas = 1;
my $drop_nullpackets = 1;
my $drop_finscans = 1;
my $no_knock_log = 0;
my @tcp_knock_services;
my @tcp_services;
my @udp_services;
my $dump_to;
my $iface = "all";
my @by_spec;
my @whitelist;
my $clearonly = 0;

sub Usage {
	print("\n");
	print("Set up the firewall on a Linux server. If no services are specified only SSH is allowed. Ping flood protection is enabled unless --drop-ping is specified.\n");
	print("\n");
	print("Usage: iptabs.pl [ --help ] [ --enable-tcp SERVICELIST ] [ --enable-udp UDPSERVICELIST ] [ OPTIONS ]\n");
	print("\n");
	print("Options:\n");
	print("--help\n");
	print("\tDisplay this helpful message.\n");
	print("\n");
	print("--enable-tcp SERVICELIST\n");
	print("\tSERVICELIST is a comma separated list of services, e.g. \"ssh,www,https,pop3\"\n");
	print("\tPorts can be specified numerically, e.g. \"80,443\"\n");
	print("\tRanges of ports can be specified numerically, e.g. \"5500:5599\"\n");
	print("\tRanges of ports can be combined, e.g. \"5500:5599,6000:6100,8080\"\n");
	print("\n");
	print("--enable-udp UDPSERVICELIST\n");
	print("\tUDPSERVICELIST works like SERVICELIST above for UDP ports.\n");
	print("\n");
	print("--interface INTERFACE\n");
	print("\tSpecify an interface for following rules. Use --interface all to specify all interfaces.\n");
	print("\n");
	print("--sshguard\n");
	print("\tEnable SSHGuard protection. SSHGuard must be installed.\n");
	print("\n");
	print("--forward\n");
	print("\tEnable forwarding. Should only be used on a router.\n");
	print("\n");
	print("--drop-ipv6\n");
	print("\tDrop all IPv6 packets.\n");
	print("\n");
	print("--drop-ping\n");
	print("\tDrop all ICMP PING packets.\n");
	print("\n");
	print("--no-drop-null\n");
	print("\tDo not drop all NULL packets.\n");
	print("\n");
	print("--no-drop-fragments\n");
	print("\tDo not drop all fragments.\n");
	print("\n");
	print("--no-syn-protect\n");
	print("\tDo not use SYN protection.\n");
	print("\n");
	print("--no-drop-xmas\n");
	print("\tDo not drop XMAS packets.\n");
	print("\n");
	print("--no-drop-finscans\n");
	print("\tDo not drop FIN scans.\n");
	print("\n");
	print("--knock DEST:FIRST:SECOND:THIRD:FOURTH\n");
	print("\tSetup TCP port knocking for the specified service. DEST is the service, and the knock ports are given in order.\n");
	print("\n");
	print("--no-knock-log\n");
	print("\tDo not log port knock attempts. Use if PSAD is used on the host.\n");
	print("\n");
	print("--dump-to\n");
	print("\tDump the netfilter commands to the given file instead of executing them.\n");
	print("\n");
	print("--by-spec\n");
	print("\tAllow the ports, protocol, and network/host specified by the argument string, e.g. 127.0.0.1/32:tcp:22,80,443\n");
	print("\n");
	print("--clear\n");
	print("\tJust clear the existing firewall rules and exit.\n");
	print("\n");
	exit(1);
}

sub execute_or_die {

	if(length($dump_to)) {
		open(OUT, ">>$dump_to") or die("Cannot append $dump_to $!\n");
		print(OUT join(" ", @_), "\n");
		close(OUT);
	} else {
		die("Execute what?\n") unless(@_ > 0 && length($_[0]));
		die("Could not execute " . $_[0] . " : $!\n") if(system($_[0]));
	}
}

sub add_rule {
	die("Add what?\n") unless(@_ > 0 && length($_[0]));
	execute_or_die("iptables " . join(" ", @_));
	execute_or_die("ip6tables " . join(" ", @_)) unless($drop_ipv6);
}

sub process_arguments {

# Process args
	while(scalar(@ARGV)) {
		my $opt = shift(@ARGV);
		if($opt =~ /^--enable-tcp$/) {
			if(!scalar(@ARGV)) {
				print("ERROR: --enable-tcp requires an argument.\n");
				Usage();
			}
			push(@tcp_services, $iface . "#" . shift(@ARGV));

		} elsif($opt =~ m/^--enable-udp$/) {
			if(!scalar(@ARGV)) {
				print("ERROR: --enable-udp requires an argument.\n");
				Usage();
			}
			push(@udp_services, $iface . "#" . shift(@ARGV));

		} elsif($opt =~ m/^--interface$/) {
			if(!scalar(@ARGV)) {
				print("ERROR: --interface requires an argument.\n");
				Usage();
			}
			$iface = shift(@ARGV);

		} elsif($opt =~ m/^--sshguard$/) {
			$use_sshguard = 1;

		} elsif($opt =~ m/^--forward$/) {
			$use_forward = 1;
			print("WARNING: Enabling forwarding. Please add additional rules to the FORWARD chain.\n");

		} elsif($opt =~ m/^--drop-ipv6$/) {
			$drop_ipv6 = 1;
			print("WARNING: Dropping all IPv6 traffic.\n");

		} elsif($opt =~ m/^--drop-ping$/) {
			$drop_ping = 1;
			print("Dropping all ping traffic.\n");

		} elsif($opt =~ m/^--no-drop-null$/) {
			$drop_nullpackets = 0;
			print("WARNING: Not dropping all NULL packets.\n");

		} elsif($opt =~ m/^--no-drop-fragments$/) {
			$drop_fragments = 0;
			print("Not dropping all fragments.\n");

		} elsif($opt =~ m/^--no-syn-protect$/) {
			$use_synprotect = 0;
			print("WARNING: Not using SYN protection.\n");

		} elsif($opt =~ m/^--no-drop-xmas$/) {
			$drop_xmas = 0;
			print("WARNING: Not dropping XMAS packets.\n");

		} elsif($opt =~ m/^--no-drop-finscans$/) {
			$drop_finscans = 0;
			print("WARNING: Not dropping FIN scan packets.\n");

		} elsif($opt =~ m/^--knock$/) {
			if(!scalar(@ARGV) || $ARGV[0] !~ m/^([a-zA-Z0-9]+:){4}[a-zA-Z0-9]+[ \t\r\n]?$/) {
				print("ERROR: --knock requires an argument.\n");
				Usage();
			}
			push(@tcp_knock_services, shift(@ARGV));

		} elsif($opt =~ m/^--no-knock-log$/) {
			print("Disabling port knock logging.\n");
			$no_knock_log = 1;

		} elsif($opt =~ m/^--dump-to$/) {
			if(!scalar(@ARGV)) {
				print("ERROR: --dump-to requires an argument.\n");
				Usage();
			}
			$dump_to = shift(@ARGV);
			open(DUMP, ">$dump_to") or die("Cannot write to $dump_to $!\n");
			print(DUMP "#!/bin/bash\n");
			close(DUMP);

		} elsif($opt =~ m/^--by-spec$/) {
			if(!scalar(@ARGV)) {
				print("ERROR: --by-spec requires an argument.\n");
				Usage();
			}
			my $specstr = shift(@ARGV);
			chomp($specstr);
			unless($specstr =~ m/^[0-9\.]+\/[0-9]+:[tu][cd]p:[0-9,]+$/) {
				print("ERROR: --by-spec Cannot figure out spec string.\n");
				Usage();
			}
			push(@by_spec, $specstr);
		} elsif($opt =~ m/^--whitelist$/) {
			if(!scalar(@ARGV)) {
				print("ERROR: --whitelist requires an argument.\n");
				Usage();
			}
			my $whitelist = shift(@ARGV);
			push(@whitelist, split(/,/, $whitelist));

		} elsif($opt =~ m/^--clear$/) {
			$clearonly = 1;

		} else {
			print("\n ERROR: Unrecognized command $opt\n") unless($opt =~ m/^--help$/);
			Usage();
		}
	}
}

sub clear_all_tables {

	return if(length($dump_to));

	# Flush all tables
	execute_or_die("iptables -F");
	execute_or_die("ip6tables -F");

	# Set default policies on INPUT and OUTPUT chains
	# This is for remote sysadmins who just empty the chains
	# and then find themselves locked out.
	add_rule("-P INPUT ACCEPT");
	add_rule("-P OUTPUT ACCEPT");

	# Remove stale IPv4 chains
	open(CHAINPIPE, "iptables -L |") or die("Cannot read chain list from iptables: $!\n");
	while(<CHAINPIPE>) {
		next unless($_ =~ m/^Chain\s+/);
		my ($chaindummy, $chain, @restdummy) = split(/\s+/);
		next if($chain =~ m/^INPUT$/);
		next if($chain =~ m/^FORWARD$/);
		next if($chain =~ m/^OUTPUT$/);
		print("Removing stale IPv4 chain $chain\n");
		execute_or_die("iptables -X $chain");
	}
	close(CHAINPIPE);

	# Remove stale IPv6 chains
	open(CHAIN6PIPE, "ip6tables -L |") or die("Cannot read chain list from ip6tables: $!\n");
	while(<CHAIN6PIPE>) {
		next unless($_ =~ m/^Chain\s+/);
		my ($chaindummy, $chain, @restdummy) = split(/\s+/);
		next if($chain =~ m/^INPUT$/);
		next if($chain =~ m/^FORWARD$/);
		next if($chain =~ m/^OUTPUT$/);
		print("Removing stale IPv6 chain $chain\n");
		execute_or_die("ip6tables -X $chain");
	}
	close(CHAIN6PIPE);
}

sub add_whitelist {
	my $saved_ipv6 = $drop_ipv6;
	$drop_ipv6 = 1;
	map { add_rule("-A ACCEPT -s $_ -j ACCEPT"); } @whitelist;
	$drop_ipv6 = $saved_ipv6;
}

sub scan_protection {

	# Drop fragments
	if($drop_fragments) {
		execute_or_die("iptables -A INPUT -f -j DROP");
		execute_or_die("ip6tables -A INPUT -m frag --fragfirst -j DROP");
		execute_or_die("ip6tables -A INPUT -m frag --fragmore -j DROP");
		execute_or_die("ip6tables -A INPUT -m frag --fraglast -j DROP");
	}

	# New connections should begin with a SYN
	add_rule("-A INPUT -p tcp ! --syn -m state --state NEW  -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix \"Drop Syn\"");
	add_rule("-A INPUT -p tcp ! --syn -m state --state NEW -j DROP") if($use_synprotect);

	# Detect XMAS packets
	add_rule("-A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix \"XMAS Packets\"");
	add_rule("-A INPUT -p tcp --tcp-flags ALL ALL -j DROP") if($drop_xmas);

	# Detect FIN packet scans
	add_rule("-A INPUT -p tcp --tcp-flags FIN,ACK FIN -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix \"FIN Packet Scan\"");
	add_rule("-A INPUT -p tcp --tcp-flags FIN,ACK FIN -j DROP") if($drop_finscans);

	# Drop NULL packets
	add_rule("-A INPUT -p tcp --tcp-flags ALL NONE -m limit --limit 5/m --limit-burst 7 -j LOG --log-level 4 --log-prefix \"NULL Packets\"");
	add_rule("-A INPUT -p tcp --tcp-flags ALL NONE -j DROP") if($drop_nullpackets);
}

sub do_knocking {

	foreach my $knockserv (@tcp_knock_services) {
		chomp($knockserv);
		my ($serv, $one, $two, $three, $four) = split(/:/, $knockserv);

		print("Enabling port knock sequence $one $two $three $four for service $serv\n");

		add_rule("-N $serv-INTO-PHASE2");
		add_rule("-A $serv-INTO-PHASE2 -m recent --name $serv-PHASE1 --remove");
		add_rule("-A $serv-INTO-PHASE2 -m recent --name $serv-PHASE2 --set");
		add_rule("-A $serv-INTO-PHASE2 -j LOG --log-prefix \"INTO $serv-PHASE2: \"") unless($no_knock_log);

		add_rule("-N $serv-INTO-PHASE3");
		add_rule("-A $serv-INTO-PHASE3 -m recent --name $serv-PHASE2 --remove");
		add_rule("-A $serv-INTO-PHASE3 -m recent --name $serv-PHASE3 --set");
		add_rule("-A $serv-INTO-PHASE3 -j LOG --log-prefix \"INTO $serv-PHASE3: \"") unless($no_knock_log);

		add_rule("-N $serv-INTO-PHASE4");
		add_rule("-A $serv-INTO-PHASE4 -m recent --name $serv-PHASE3 --remove");
		add_rule("-A $serv-INTO-PHASE4 -m recent --name $serv-PHASE4 --set");
		add_rule("-A $serv-INTO-PHASE4 -j LOG --log-prefix \"INTO $serv-PHASE4: \"") unless($no_knock_log);

		add_rule("-A INPUT -m recent --update --name $serv-PHASE1");

		add_rule("-A INPUT -p tcp --dport $one -m recent --set --name $serv-PHASE1");
		# add_rule("-A INPUT -p tcp --dport $one -j LOG --log-prefix \"INTO $serv-PHASE1: \"") unless($no_knock_log);

		add_rule("-A INPUT -p tcp --dport $two -m recent --rcheck --name $serv-PHASE1 -j $serv-INTO-PHASE2");
		add_rule("-A INPUT -p tcp --dport $three -m recent --rcheck --name $serv-PHASE2 -j $serv-INTO-PHASE3");
		add_rule("-A INPUT -p tcp --dport $four -m recent --rcheck --name $serv-PHASE3 -j $serv-INTO-PHASE4");

		add_rule("-A INPUT -p tcp --syn --dport $serv -m recent --rcheck --seconds 5 --name $serv-PHASE4 -j LOG --log-prefix \"KNOCK UNLOCK: \"") unless($no_knock_log);
		add_rule("-A INPUT -p tcp --syn --dport $serv -m recent --rcheck --seconds 5 --name $serv-PHASE4 -j ACCEPT");
	}
}

#-------------#
# Entry point #
#-------------#

print("\n");

process_arguments;

# If nothing specified, default to allowing SSH on all interfaces
push(@tcp_services, "all:ssh") unless(scalar(@tcp_services) || scalar(@by_spec) || scalar(@whitelist));

clear_all_tables;

exit(0) if($clearonly);

# Deal with forwarding
unless($use_forward) {
	add_rule("-P FORWARD DROP");
} else {
	add_rule("iptables -P FORWARD ACCEPT");
}

# Loopback always gets through
add_rule("-A INPUT -i lo -j ACCEPT");

if($drop_ipv6) {
	# Accept IPv6 on loopback, too many things could break otherwise
	execute_or_die("ip6tables -A INPUT -i lo -j ACCEPT");
	execute_or_die("ip6tables -A INPUT -j DROP");
}

# Handle pings by limiting to 2 per second
add_rule("-A INPUT -p icmp -m limit --limit 2/second --limit-burst 3 -j ACCEPT") unless($drop_ping);

add_whitelist;

scan_protection;

# Accept anything we originated
add_rule("-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT");

do_knocking if(scalar(@tcp_knock_services));

if($use_sshguard) {
	print("Enabling SSHGuard protection.\n");
	add_rule("-N sshguard");
	add_rule("-A INPUT -j sshguard");
}

# IPv6 doesn't grok IPv4 addresses
my $saveddropipv6 = $drop_ipv6;
$drop_ipv6 = 1;
foreach my $spec (@by_spec) {
	my ($nh, $protocol, $ports) = split(/:/, $spec);
	foreach my $p (split(/,/, $ports)) {
		add_rule("-A INPUT -p $protocol -s $nh --dport $p -j ACCEPT");
	}
}
$drop_ipv6 = $saveddropipv6;

foreach my $tcp_service_string (@tcp_services) {
	my ($tcp_iface, $service_string) = split(/#/, $tcp_service_string);
	foreach my $service (split(/,/, $service_string)) {
		print("Enabling $service (TCP)\n");
		my $tcp_iface_param = "";
		$tcp_iface_param = " -i $tcp_iface" unless($tcp_iface =~ m/^all/);
		add_rule("-A INPUT$tcp_iface_param -p tcp --dport $service -j ACCEPT");
	}
}

foreach my $udp_service_string (@udp_services) {
	my ($udp_iface, $udp_service_string) = split(/#/, $udp_service_string);
	foreach my $udpservice (split(/,/, $udp_service_string)) {
		print("Enabling $udpservice (UDP)\n");
		my $udp_iface_param = "";
		$udp_iface_param = " -i $udp_iface" unless($udp_iface =~ m/^all/);
		add_rule("-A INPUT$udp_iface_param -p udp --dport $udpservice -j ACCEPT");
	}
}

# Add logging for PSAD
add_rule("-A INPUT -j LOG");
add_rule("-A FORWARD -j LOG");

# Drop anything not explicitly matched.
add_rule("-A INPUT -j DROP");

print("\nAll done.\nFor Ubuntu use 'service iptables-persistent save' to make settings persistent across reboots.\n\n") unless(defined($dump_to) && length($dump_to));
exit(0);
